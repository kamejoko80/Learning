% Auto-generated by cameraCalibrator app on 07-Dec-2015
%-------------------------------------------------------


% Define images to process
imageFileNames = {'photo1.jpg',...
    'photo2.jpg',...
    'photo3.jpg',...
    'photo4.jpg',...
    'photo5.jpg',...
    'photo6.jpg',...
    'photo7.jpg',...
    'photo8.jpg',...
    'photo9.jpg',...
    'photo10.jpg',...
    'photo11.jpg',...
    'photo12.jpg',...
    'photo13.jpg',...
    'photo14.jpg',...
    'photo15.jpg',...
    'photo16.jpg',...
    'photo17.jpg',...
    'photo18.jpg',...
    'photo19.jpg',...
    };

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Generate world coordinates of the corners of the squares
squareSize = 3.060000e+01;  % in units of 'mm'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'mm');

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams, 'BarGraph');

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
originalImage = imread(imageFileNames{1});
undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('SparseReconstructionExample')
